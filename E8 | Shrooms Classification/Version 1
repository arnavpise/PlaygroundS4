{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch import nn\nimport imblearn\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom torch.optim.lr_scheduler import CosineAnnealingLR\nfrom torch.cuda.amp import GradScaler, autocast\nfrom scipy.sparse import csr_matrix\n\n# For categorical target, use Chi-square test\nfrom sklearn.feature_selection import chi2\nfrom sklearn.preprocessing import LabelEncoder\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-01T10:27:58.516919Z","iopub.execute_input":"2024-08-01T10:27:58.517982Z","iopub.status.idle":"2024-08-01T10:28:01.714986Z","shell.execute_reply.started":"2024-08-01T10:27:58.517946Z","shell.execute_reply":"2024-08-01T10:28:01.713933Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e8/sample_submission.csv\n/kaggle/input/playground-series-s4e8/train.csv\n/kaggle/input/playground-series-s4e8/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available else \"cpu\"\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:01.716850Z","iopub.execute_input":"2024-08-01T10:28:01.717512Z","iopub.status.idle":"2024-08-01T10:28:01.722396Z","shell.execute_reply.started":"2024-08-01T10:28:01.717477Z","shell.execute_reply":"2024-08-01T10:28:01.721440Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train = pd.read_csv(r'/kaggle/input/playground-series-s4e8/train.csv')\ndf_test = pd.read_csv(r'/kaggle/input/playground-series-s4e8/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:01.723604Z","iopub.execute_input":"2024-08-01T10:28:01.723945Z","iopub.status.idle":"2024-08-01T10:28:14.843565Z","shell.execute_reply.started":"2024-08-01T10:28:01.723912Z","shell.execute_reply":"2024-08-01T10:28:14.842516Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df_for_preds_id = pd.read_csv(r'/kaggle/input/playground-series-s4e8/test.csv')\ndf_for_preds_id.shape\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:59:39.429160Z","iopub.execute_input":"2024-08-01T10:59:39.429512Z","iopub.status.idle":"2024-08-01T10:59:44.195088Z","shell.execute_reply.started":"2024-08-01T10:59:39.429489Z","shell.execute_reply":"2024-08-01T10:59:44.194134Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"(2077964, 21)"},"metadata":{}}]},{"cell_type":"code","source":"print(df_train.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:14.846346Z","iopub.execute_input":"2024-08-01T10:28:14.847019Z","iopub.status.idle":"2024-08-01T10:28:19.101877Z","shell.execute_reply.started":"2024-08-01T10:28:14.846981Z","shell.execute_reply":"2024-08-01T10:28:19.100928Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"id                            0\nclass                         0\ncap-diameter                  4\ncap-shape                    40\ncap-surface              671023\ncap-color                    12\ndoes-bruise-or-bleed          8\ngill-attachment          523936\ngill-spacing            1258435\ngill-color                   57\nstem-height                   0\nstem-width                    0\nstem-root               2757023\nstem-surface            1980861\nstem-color                   38\nveil-type               2957493\nveil-color              2740947\nhas-ring                     24\nring-type                128880\nspore-print-color       2849682\nhabitat                      45\nseason                        0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df_test","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:58:28.618716Z","iopub.execute_input":"2024-08-01T10:58:28.619537Z","iopub.status.idle":"2024-08-01T10:58:28.641787Z","shell.execute_reply.started":"2024-08-01T10:58:28.619502Z","shell.execute_reply":"2024-08-01T10:58:28.640535Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"              id  cap-diameter  cap-shape  cap-surface  cap-color  \\\n0              0           824         59           53         44   \n1              1           650         50           53         45   \n2              2           160         36           38         44   \n3              3           307         59           53         44   \n4              4           577         59           39         55   \n...          ...           ...        ...          ...        ...   \n2077959  2077959            48         59           38         53   \n2077960  2077960           272         59           50         53   \n2077961  2077961           533         59           36         34   \n2077962  2077962           463         36           38         44   \n2077963  2077963          1511         41           53         53   \n\n         does-bruise-or-bleed  gill-attachment  gill-spacing  gill-color  \\\n0                          18               37            17          52   \n1                           5               37            17          54   \n2                           5               37            17          41   \n3                           5               57            17          41   \n4                           5               55            17          54   \n...                       ...              ...           ...         ...   \n2077959                     5               37            18          52   \n2077960                     5               41            17          52   \n2077961                     5               37            17          52   \n2077962                     5               37            18          31   \n2077963                     5               41            17          54   \n\n         stem-height  stem-width  stem-color  has-ring  ring-type  habitat  \\\n0               1009        1669          51        17         15       16   \n1                 23        1032          38         6         14       16   \n2                514         271          38         6         14       16   \n3                394         808          51        17         35       16   \n4                569        1327          53        17         14       16   \n...              ...         ...         ...       ...        ...      ...   \n2077959          163          92          29         6         14       16   \n2077960          165         695          51         6         14       19   \n2077961          512         931          53        17         35       16   \n2077962          496         303          31         6         14       16   \n2077963          165        1728          51         6         14       16   \n\n         season  \n0             0  \n1             0  \n2             1  \n3             2  \n4             2  \n...         ...  \n2077959       2  \n2077960       0  \n2077961       0  \n2077962       0  \n2077963       3  \n\n[2077964 rows x 16 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>stem-height</th>\n      <th>stem-width</th>\n      <th>stem-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>824</td>\n      <td>59</td>\n      <td>53</td>\n      <td>44</td>\n      <td>18</td>\n      <td>37</td>\n      <td>17</td>\n      <td>52</td>\n      <td>1009</td>\n      <td>1669</td>\n      <td>51</td>\n      <td>17</td>\n      <td>15</td>\n      <td>16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>650</td>\n      <td>50</td>\n      <td>53</td>\n      <td>45</td>\n      <td>5</td>\n      <td>37</td>\n      <td>17</td>\n      <td>54</td>\n      <td>23</td>\n      <td>1032</td>\n      <td>38</td>\n      <td>6</td>\n      <td>14</td>\n      <td>16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>160</td>\n      <td>36</td>\n      <td>38</td>\n      <td>44</td>\n      <td>5</td>\n      <td>37</td>\n      <td>17</td>\n      <td>41</td>\n      <td>514</td>\n      <td>271</td>\n      <td>38</td>\n      <td>6</td>\n      <td>14</td>\n      <td>16</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>307</td>\n      <td>59</td>\n      <td>53</td>\n      <td>44</td>\n      <td>5</td>\n      <td>57</td>\n      <td>17</td>\n      <td>41</td>\n      <td>394</td>\n      <td>808</td>\n      <td>51</td>\n      <td>17</td>\n      <td>35</td>\n      <td>16</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>577</td>\n      <td>59</td>\n      <td>39</td>\n      <td>55</td>\n      <td>5</td>\n      <td>55</td>\n      <td>17</td>\n      <td>54</td>\n      <td>569</td>\n      <td>1327</td>\n      <td>53</td>\n      <td>17</td>\n      <td>14</td>\n      <td>16</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2077959</th>\n      <td>2077959</td>\n      <td>48</td>\n      <td>59</td>\n      <td>38</td>\n      <td>53</td>\n      <td>5</td>\n      <td>37</td>\n      <td>18</td>\n      <td>52</td>\n      <td>163</td>\n      <td>92</td>\n      <td>29</td>\n      <td>6</td>\n      <td>14</td>\n      <td>16</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2077960</th>\n      <td>2077960</td>\n      <td>272</td>\n      <td>59</td>\n      <td>50</td>\n      <td>53</td>\n      <td>5</td>\n      <td>41</td>\n      <td>17</td>\n      <td>52</td>\n      <td>165</td>\n      <td>695</td>\n      <td>51</td>\n      <td>6</td>\n      <td>14</td>\n      <td>19</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2077961</th>\n      <td>2077961</td>\n      <td>533</td>\n      <td>59</td>\n      <td>36</td>\n      <td>34</td>\n      <td>5</td>\n      <td>37</td>\n      <td>17</td>\n      <td>52</td>\n      <td>512</td>\n      <td>931</td>\n      <td>53</td>\n      <td>17</td>\n      <td>35</td>\n      <td>16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2077962</th>\n      <td>2077962</td>\n      <td>463</td>\n      <td>36</td>\n      <td>38</td>\n      <td>44</td>\n      <td>5</td>\n      <td>37</td>\n      <td>18</td>\n      <td>31</td>\n      <td>496</td>\n      <td>303</td>\n      <td>31</td>\n      <td>6</td>\n      <td>14</td>\n      <td>16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2077963</th>\n      <td>2077963</td>\n      <td>1511</td>\n      <td>41</td>\n      <td>53</td>\n      <td>53</td>\n      <td>5</td>\n      <td>41</td>\n      <td>17</td>\n      <td>54</td>\n      <td>165</td>\n      <td>1728</td>\n      <td>51</td>\n      <td>6</td>\n      <td>14</td>\n      <td>16</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>2077964 rows × 16 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"missing_percentage = df_train.isnull().sum() / len(df_train) * 100\nprint(missing_percentage)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:19.102956Z","iopub.execute_input":"2024-08-01T10:28:19.103270Z","iopub.status.idle":"2024-08-01T10:28:23.349117Z","shell.execute_reply.started":"2024-08-01T10:28:19.103236Z","shell.execute_reply":"2024-08-01T10:28:23.348142Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"id                       0.000000\nclass                    0.000000\ncap-diameter             0.000128\ncap-shape                0.001283\ncap-surface             21.528227\ncap-color                0.000385\ndoes-bruise-or-bleed     0.000257\ngill-attachment         16.809280\ngill-spacing            40.373988\ngill-color               0.001829\nstem-height              0.000000\nstem-width               0.000000\nstem-root               88.452732\nstem-surface            63.551362\nstem-color               0.001219\nveil-type               94.884350\nveil-color              87.936970\nhas-ring                 0.000770\nring-type                4.134818\nspore-print-color       91.425482\nhabitat                  0.001444\nseason                   0.000000\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"missing_percentage = df_test.isnull().sum() / len(df_test) * 100\nprint(missing_percentage)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:23.350133Z","iopub.execute_input":"2024-08-01T10:28:23.350411Z","iopub.status.idle":"2024-08-01T10:28:25.977408Z","shell.execute_reply.started":"2024-08-01T10:28:23.350388Z","shell.execute_reply":"2024-08-01T10:28:25.976380Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"id                       0.000000\ncap-diameter             0.000337\ncap-shape                0.001492\ncap-surface             21.506821\ncap-color                0.000626\ndoes-bruise-or-bleed     0.000481\ngill-attachment         16.834796\ngill-spacing            40.404694\ngill-color               0.002358\nstem-height              0.000048\nstem-width               0.000000\nstem-root               88.452543\nstem-surface            63.595327\nstem-color               0.001011\nveil-type               94.878689\nveil-color              87.880445\nhas-ring                 0.000914\nring-type                4.148051\nspore-print-color       91.417224\nhabitat                  0.001203\nseason                   0.000000\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculate the threshold\nthreshold = 41\nmax_missing_count = len(df_train) * threshold\nprint(f\"Maximum missing values allowed: {max_missing_count}\")\n\n# Find columns exceeding the threshold\ncolumns_to_drop = missing_percentage[missing_percentage > threshold].index\nprint(f\"Features with too many missing values: {columns_to_drop}\")\n\ndf_train = df_train.drop(columns=columns_to_drop)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:25.978844Z","iopub.execute_input":"2024-08-01T10:28:25.979632Z","iopub.status.idle":"2024-08-01T10:28:26.586355Z","shell.execute_reply.started":"2024-08-01T10:28:25.979591Z","shell.execute_reply":"2024-08-01T10:28:26.585287Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Maximum missing values allowed: 127794745\nFeatures with too many missing values: Index(['stem-root', 'stem-surface', 'veil-type', 'veil-color',\n       'spore-print-color'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculate the threshold\nthreshold = 41\nmax_missing_count = len(df_test) * threshold\nprint(f\"Maximum missing values allowed: {max_missing_count}\")\n\n# Find columns exceeding the threshold\ncolumns_to_drop = missing_percentage[missing_percentage > threshold].index\nprint(f\"Features with too many missing values: {columns_to_drop}\")\n\ndf_test = df_test.drop(columns=columns_to_drop)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:26.587538Z","iopub.execute_input":"2024-08-01T10:28:26.587829Z","iopub.status.idle":"2024-08-01T10:28:26.896566Z","shell.execute_reply.started":"2024-08-01T10:28:26.587804Z","shell.execute_reply":"2024-08-01T10:28:26.895585Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Maximum missing values allowed: 85196524\nFeatures with too many missing values: Index(['stem-root', 'stem-surface', 'veil-type', 'veil-color',\n       'spore-print-color'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:26.897659Z","iopub.execute_input":"2024-08-01T10:28:26.897935Z","iopub.status.idle":"2024-08-01T10:28:30.528365Z","shell.execute_reply.started":"2024-08-01T10:28:26.897912Z","shell.execute_reply":"2024-08-01T10:28:30.527342Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"id                            0\nclass                         0\ncap-diameter                  4\ncap-shape                    40\ncap-surface              671023\ncap-color                    12\ndoes-bruise-or-bleed          8\ngill-attachment          523936\ngill-spacing            1258435\ngill-color                   57\nstem-height                   0\nstem-width                    0\nstem-color                   38\nhas-ring                     24\nring-type                128880\nhabitat                      45\nseason                        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n\ndf_train = pd.DataFrame(df_train)\ndf_test = pd.DataFrame(df_test)\n\n# Function to fill missing values with mode for each DataFrame\ndef fill_missing_with_mode(df_train, df_test):\n    # Calculate mode for each column in the training DataFrame\n    mode_values = df_train.mode().iloc[0]\n    \n    # Print mode values for reference\n    print(\"Mode values from training data:\")\n    print(mode_values)\n    \n    # Fill missing values in training data with mode values\n    df_train_filled = df_train.fillna(mode_values)\n    \n    # Fill missing values in testing data with mode values from training data\n    df_test_filled = df_test.fillna(mode_values)\n    \n    # Return the filled DataFrames\n    return df_train_filled, df_test_filled\n\n# Apply the function\ndf_train, df_test = fill_missing_with_mode(df_train, df_test)\n\n# Print the results\nprint(\"\\nTraining Data after filling missing values with mode:\")\nprint(df_train)\nprint(\"\\nTesting Data after filling missing values with mode:\")\nprint(df_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:30.531886Z","iopub.execute_input":"2024-08-01T10:28:30.532216Z","iopub.status.idle":"2024-08-01T10:28:47.137984Z","shell.execute_reply.started":"2024-08-01T10:28:30.532191Z","shell.execute_reply":"2024-08-01T10:28:47.136142Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Mode values from training data:\nid                         0\nclass                      p\ncap-diameter            1.49\ncap-shape                  x\ncap-surface                t\ncap-color                  n\ndoes-bruise-or-bleed       f\ngill-attachment            a\ngill-spacing               c\ngill-color                 w\nstem-height             5.24\nstem-width              2.41\nstem-color                 w\nhas-ring                   f\nring-type                  f\nhabitat                    d\nseason                     a\nName: 0, dtype: object\n\nTraining Data after filling missing values with mode:\n              id class  cap-diameter cap-shape cap-surface cap-color  \\\n0              0     e          8.80         f           s         u   \n1              1     p          4.51         x           h         o   \n2              2     e          6.94         f           s         b   \n3              3     e          3.88         f           y         g   \n4              4     e          5.85         x           l         w   \n...          ...   ...           ...       ...         ...       ...   \n3116940  3116940     e          9.29         f           t         n   \n3116941  3116941     e         10.88         s           t         w   \n3116942  3116942     p          7.82         x           e         e   \n3116943  3116943     e          9.45         p           i         n   \n3116944  3116944     p          3.20         x           s         g   \n\n        does-bruise-or-bleed gill-attachment gill-spacing gill-color  \\\n0                          f               a            c          w   \n1                          f               a            c          n   \n2                          f               x            c          w   \n3                          f               s            c          g   \n4                          f               d            c          w   \n...                      ...             ...          ...        ...   \n3116940                    t               a            c          w   \n3116941                    t               d            c          p   \n3116942                    f               a            c          w   \n3116943                    t               e            c          p   \n3116944                    f               d            c          w   \n\n         stem-height  stem-width stem-color has-ring ring-type habitat season  \n0               4.51       15.39          w        f         f       d      a  \n1               4.79        6.48          o        t         z       d      w  \n2               6.85        9.93          n        f         f       l      w  \n3               4.16        6.53          w        f         f       d      u  \n4               3.37        8.36          w        f         f       g      a  \n...              ...         ...        ...      ...       ...     ...    ...  \n3116940        12.14       18.81          w        t         g       d      u  \n3116941         6.65       26.97          w        f         f       d      u  \n3116942         9.51       11.06          y        t         z       d      a  \n3116943         9.13       17.77          w        t         p       d      u  \n3116944         2.82        7.79          w        f         f       g      u  \n\n[3116945 rows x 17 columns]\n\nTesting Data after filling missing values with mode:\n              id  cap-diameter cap-shape cap-surface cap-color  \\\n0        3116945          8.64         x           t         n   \n1        3116946          6.90         o           t         o   \n2        3116947          2.00         b           g         n   \n3        3116948          3.47         x           t         n   \n4        3116949          6.17         x           h         y   \n...          ...           ...       ...         ...       ...   \n2077959  5194904          0.88         x           g         w   \n2077960  5194905          3.12         x           s         w   \n2077961  5194906          5.73         x           e         e   \n2077962  5194907          5.03         b           g         n   \n2077963  5194908         15.51         f           t         w   \n\n        does-bruise-or-bleed gill-attachment gill-spacing gill-color  \\\n0                          t               a            c          w   \n1                          f               a            c          y   \n2                          f               a            c          n   \n3                          f               s            c          n   \n4                          f               p            c          y   \n...                      ...             ...          ...        ...   \n2077959                    f               a            d          w   \n2077960                    f               d            c          w   \n2077961                    f               a            c          w   \n2077962                    f               a            d          g   \n2077963                    f               d            c          y   \n\n         stem-height  stem-width stem-color has-ring ring-type habitat season  \n0              11.13       17.12          w        t         g       d      a  \n1               1.27       10.75          n        f         f       d      a  \n2               6.18        3.14          n        f         f       d      s  \n3               4.98        8.51          w        t         z       d      u  \n4               6.73       13.70          y        t         f       d      u  \n...              ...         ...        ...      ...       ...     ...    ...  \n2077959         2.67        1.35          e        f         f       d      u  \n2077960         2.69        7.38          w        f         f       g      a  \n2077961         6.16        9.74          y        t         z       d      a  \n2077962         6.00        3.46          g        f         f       d      a  \n2077963         2.69       17.71          w        f         f       d      w  \n\n[2077964 rows x 16 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.tail(20)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:47.139560Z","iopub.execute_input":"2024-08-01T10:28:47.139834Z","iopub.status.idle":"2024-08-01T10:28:47.169706Z","shell.execute_reply.started":"2024-08-01T10:28:47.139811Z","shell.execute_reply":"2024-08-01T10:28:47.168707Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"              id class  cap-diameter cap-shape cap-surface cap-color  \\\n3116925  3116925     p          7.65         f           h         r   \n3116926  3116926     e          8.74         x           t         n   \n3116927  3116927     e          3.75         x           t         n   \n3116928  3116928     p          7.36         x           e         n   \n3116929  3116929     e          7.17         x           t         y   \n3116930  3116930     e          4.68         x           h         n   \n3116931  3116931     e          6.19         x           t         y   \n3116932  3116932     e          4.03         x           t         w   \n3116933  3116933     e          8.44         f           s         w   \n3116934  3116934     p          7.52         b           y         n   \n3116935  3116935     p         14.58         x           d         n   \n3116936  3116936     p          1.70         x           k         n   \n3116937  3116937     p          0.69         x           g         o   \n3116938  3116938     p          9.08         s           t         p   \n3116939  3116939     p          9.30         o           t         e   \n3116940  3116940     e          9.29         f           t         n   \n3116941  3116941     e         10.88         s           t         w   \n3116942  3116942     p          7.82         x           e         e   \n3116943  3116943     e          9.45         p           i         n   \n3116944  3116944     p          3.20         x           s         g   \n\n        does-bruise-or-bleed gill-attachment gill-spacing gill-color  \\\n3116925                    f               a            c          w   \n3116926                    t               a            c          w   \n3116927                    f               d            c          o   \n3116928                    f               a            c          w   \n3116929                    f               p            c          y   \n3116930                    f               x            c          w   \n3116931                    f               p            c          y   \n3116932                    f               x            c          w   \n3116933                    f               s            c          w   \n3116934                    f               a            c          p   \n3116935                    f               p            c          p   \n3116936                    f               a            c          n   \n3116937                    f               a            c          y   \n3116938                    t               d            c          p   \n3116939                    f               f            f          f   \n3116940                    t               a            c          w   \n3116941                    t               d            c          p   \n3116942                    f               a            c          w   \n3116943                    t               e            c          p   \n3116944                    f               d            c          w   \n\n         stem-height  stem-width stem-color has-ring ring-type habitat season  \n3116925         8.41       14.64          w        t         p       d      a  \n3116926         7.79       14.90          w        t         g       d      a  \n3116927         6.08        7.37          o        f         f       d      a  \n3116928         7.80        9.65          e        f         f       d      u  \n3116929         6.91       14.04          y        t         f       d      a  \n3116930         4.51        4.61          n        t         r       d      w  \n3116931         6.93       13.84          y        t         f       d      u  \n3116932         7.81        8.19          n        t         f       g      s  \n3116933         6.82       26.42          w        f         f       m      s  \n3116934        15.32       18.82          w        f         f       d      a  \n3116935        14.78       35.76          w        f         f       d      a  \n3116936         4.77        1.61          n        f         f       d      w  \n3116937         3.51        0.73          y        f         f       d      u  \n3116938         8.07       14.70          p        t         f       d      a  \n3116939         3.42       25.38          n        f         f       d      u  \n3116940        12.14       18.81          w        t         g       d      u  \n3116941         6.65       26.97          w        f         f       d      u  \n3116942         9.51       11.06          y        t         z       d      a  \n3116943         9.13       17.77          w        t         p       d      u  \n3116944         2.82        7.79          w        f         f       g      u  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>class</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>stem-height</th>\n      <th>stem-width</th>\n      <th>stem-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3116925</th>\n      <td>3116925</td>\n      <td>p</td>\n      <td>7.65</td>\n      <td>f</td>\n      <td>h</td>\n      <td>r</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>8.41</td>\n      <td>14.64</td>\n      <td>w</td>\n      <td>t</td>\n      <td>p</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116926</th>\n      <td>3116926</td>\n      <td>e</td>\n      <td>8.74</td>\n      <td>x</td>\n      <td>t</td>\n      <td>n</td>\n      <td>t</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>7.79</td>\n      <td>14.90</td>\n      <td>w</td>\n      <td>t</td>\n      <td>g</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116927</th>\n      <td>3116927</td>\n      <td>e</td>\n      <td>3.75</td>\n      <td>x</td>\n      <td>t</td>\n      <td>n</td>\n      <td>f</td>\n      <td>d</td>\n      <td>c</td>\n      <td>o</td>\n      <td>6.08</td>\n      <td>7.37</td>\n      <td>o</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116928</th>\n      <td>3116928</td>\n      <td>p</td>\n      <td>7.36</td>\n      <td>x</td>\n      <td>e</td>\n      <td>n</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>7.80</td>\n      <td>9.65</td>\n      <td>e</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116929</th>\n      <td>3116929</td>\n      <td>e</td>\n      <td>7.17</td>\n      <td>x</td>\n      <td>t</td>\n      <td>y</td>\n      <td>f</td>\n      <td>p</td>\n      <td>c</td>\n      <td>y</td>\n      <td>6.91</td>\n      <td>14.04</td>\n      <td>y</td>\n      <td>t</td>\n      <td>f</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116930</th>\n      <td>3116930</td>\n      <td>e</td>\n      <td>4.68</td>\n      <td>x</td>\n      <td>h</td>\n      <td>n</td>\n      <td>f</td>\n      <td>x</td>\n      <td>c</td>\n      <td>w</td>\n      <td>4.51</td>\n      <td>4.61</td>\n      <td>n</td>\n      <td>t</td>\n      <td>r</td>\n      <td>d</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3116931</th>\n      <td>3116931</td>\n      <td>e</td>\n      <td>6.19</td>\n      <td>x</td>\n      <td>t</td>\n      <td>y</td>\n      <td>f</td>\n      <td>p</td>\n      <td>c</td>\n      <td>y</td>\n      <td>6.93</td>\n      <td>13.84</td>\n      <td>y</td>\n      <td>t</td>\n      <td>f</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116932</th>\n      <td>3116932</td>\n      <td>e</td>\n      <td>4.03</td>\n      <td>x</td>\n      <td>t</td>\n      <td>w</td>\n      <td>f</td>\n      <td>x</td>\n      <td>c</td>\n      <td>w</td>\n      <td>7.81</td>\n      <td>8.19</td>\n      <td>n</td>\n      <td>t</td>\n      <td>f</td>\n      <td>g</td>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>3116933</th>\n      <td>3116933</td>\n      <td>e</td>\n      <td>8.44</td>\n      <td>f</td>\n      <td>s</td>\n      <td>w</td>\n      <td>f</td>\n      <td>s</td>\n      <td>c</td>\n      <td>w</td>\n      <td>6.82</td>\n      <td>26.42</td>\n      <td>w</td>\n      <td>f</td>\n      <td>f</td>\n      <td>m</td>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>3116934</th>\n      <td>3116934</td>\n      <td>p</td>\n      <td>7.52</td>\n      <td>b</td>\n      <td>y</td>\n      <td>n</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>p</td>\n      <td>15.32</td>\n      <td>18.82</td>\n      <td>w</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116935</th>\n      <td>3116935</td>\n      <td>p</td>\n      <td>14.58</td>\n      <td>x</td>\n      <td>d</td>\n      <td>n</td>\n      <td>f</td>\n      <td>p</td>\n      <td>c</td>\n      <td>p</td>\n      <td>14.78</td>\n      <td>35.76</td>\n      <td>w</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116936</th>\n      <td>3116936</td>\n      <td>p</td>\n      <td>1.70</td>\n      <td>x</td>\n      <td>k</td>\n      <td>n</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>n</td>\n      <td>4.77</td>\n      <td>1.61</td>\n      <td>n</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3116937</th>\n      <td>3116937</td>\n      <td>p</td>\n      <td>0.69</td>\n      <td>x</td>\n      <td>g</td>\n      <td>o</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>y</td>\n      <td>3.51</td>\n      <td>0.73</td>\n      <td>y</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116938</th>\n      <td>3116938</td>\n      <td>p</td>\n      <td>9.08</td>\n      <td>s</td>\n      <td>t</td>\n      <td>p</td>\n      <td>t</td>\n      <td>d</td>\n      <td>c</td>\n      <td>p</td>\n      <td>8.07</td>\n      <td>14.70</td>\n      <td>p</td>\n      <td>t</td>\n      <td>f</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116939</th>\n      <td>3116939</td>\n      <td>p</td>\n      <td>9.30</td>\n      <td>o</td>\n      <td>t</td>\n      <td>e</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>3.42</td>\n      <td>25.38</td>\n      <td>n</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116940</th>\n      <td>3116940</td>\n      <td>e</td>\n      <td>9.29</td>\n      <td>f</td>\n      <td>t</td>\n      <td>n</td>\n      <td>t</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>12.14</td>\n      <td>18.81</td>\n      <td>w</td>\n      <td>t</td>\n      <td>g</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116941</th>\n      <td>3116941</td>\n      <td>e</td>\n      <td>10.88</td>\n      <td>s</td>\n      <td>t</td>\n      <td>w</td>\n      <td>t</td>\n      <td>d</td>\n      <td>c</td>\n      <td>p</td>\n      <td>6.65</td>\n      <td>26.97</td>\n      <td>w</td>\n      <td>f</td>\n      <td>f</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116942</th>\n      <td>3116942</td>\n      <td>p</td>\n      <td>7.82</td>\n      <td>x</td>\n      <td>e</td>\n      <td>e</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>9.51</td>\n      <td>11.06</td>\n      <td>y</td>\n      <td>t</td>\n      <td>z</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116943</th>\n      <td>3116943</td>\n      <td>e</td>\n      <td>9.45</td>\n      <td>p</td>\n      <td>i</td>\n      <td>n</td>\n      <td>t</td>\n      <td>e</td>\n      <td>c</td>\n      <td>p</td>\n      <td>9.13</td>\n      <td>17.77</td>\n      <td>w</td>\n      <td>t</td>\n      <td>p</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116944</th>\n      <td>3116944</td>\n      <td>p</td>\n      <td>3.20</td>\n      <td>x</td>\n      <td>s</td>\n      <td>g</td>\n      <td>f</td>\n      <td>d</td>\n      <td>c</td>\n      <td>w</td>\n      <td>2.82</td>\n      <td>7.79</td>\n      <td>w</td>\n      <td>f</td>\n      <td>f</td>\n      <td>g</td>\n      <td>u</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Example of Label Encoding\nlabel_encoders = {}\nfor column in df_train.columns:\n    le = LabelEncoder()\n    df_train[column] = le.fit_transform(df_train[column])\n    label_encoders[column] = le\n\nprint(\"Encoded DataFrame:\")\nprint(df_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:47.171173Z","iopub.execute_input":"2024-08-01T10:28:47.171977Z","iopub.status.idle":"2024-08-01T10:28:57.500656Z","shell.execute_reply.started":"2024-08-01T10:28:47.171938Z","shell.execute_reply":"2024-08-01T10:28:57.499719Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Encoded DataFrame:\n              id  class  cap-diameter  cap-shape  cap-surface  cap-color  \\\n0              0      0           843         53           72         72   \n1              1      1           414         71           56         64   \n2              2      0           657         53           72         49   \n3              3      0           351         53           81         57   \n4              4      0           548         71           65         74   \n...          ...    ...           ...        ...          ...        ...   \n3116940  3116940      0           892         53           76         63   \n3116941  3116941      0          1051         67           76         74   \n3116942  3116942      1           745         71           53         55   \n3116943  3116943      0           908         64           59         63   \n3116944  3116944      1           283         71           72         57   \n\n         does-bruise-or-bleed  gill-attachment  gill-spacing  gill-color  \\\n0                           8               44            28          59   \n1                           8               44            28          46   \n2                           8               75            28          59   \n3                           8               70            28          37   \n4                           8               47            28          59   \n...                       ...              ...           ...         ...   \n3116940                    20               44            28          59   \n3116941                    20               47            28          48   \n3116942                     8               44            28          59   \n3116943                    20               52            28          48   \n3116944                     8               47            28          59   \n\n         stem-height  stem-width  stem-color  has-ring  ring-type  habitat  \\\n0                353        1493          55         5         18       25   \n1                381         602          47        18         39       25   \n2                587         947          46         5         18       36   \n3                318         607          55         5         18       25   \n4                239         790          55         5         18       29   \n...              ...         ...         ...       ...        ...      ...   \n3116940         1116        1835          55        18         19       25   \n3116941          567        2651          55         5         18       25   \n3116942          853        1060          57        18         39       25   \n3116943          815        1731          55        18         27       25   \n3116944          184         733          55         5         18       29   \n\n         season  \n0             0  \n1             3  \n2             3  \n3             2  \n4             0  \n...         ...  \n3116940       2  \n3116941       2  \n3116942       0  \n3116943       2  \n3116944       2  \n\n[3116945 rows x 17 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Example of Label Encoding\nlabel_encoders = {}\nfor column in df_test.columns:\n    le = LabelEncoder()\n    df_test[column] = le.fit_transform(df_test[column])\n    label_encoders[column] = le\n\nprint(\"Encoded DataFrame:\")\nprint(df_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:28:57.501759Z","iopub.execute_input":"2024-08-01T10:28:57.502093Z","iopub.status.idle":"2024-08-01T10:29:04.064042Z","shell.execute_reply.started":"2024-08-01T10:28:57.502044Z","shell.execute_reply":"2024-08-01T10:29:04.063107Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Encoded DataFrame:\n              id  cap-diameter  cap-shape  cap-surface  cap-color  \\\n0              0           824         59           53         44   \n1              1           650         50           53         45   \n2              2           160         36           38         44   \n3              3           307         59           53         44   \n4              4           577         59           39         55   \n...          ...           ...        ...          ...        ...   \n2077959  2077959            48         59           38         53   \n2077960  2077960           272         59           50         53   \n2077961  2077961           533         59           36         34   \n2077962  2077962           463         36           38         44   \n2077963  2077963          1511         41           53         53   \n\n         does-bruise-or-bleed  gill-attachment  gill-spacing  gill-color  \\\n0                          18               37            17          52   \n1                           5               37            17          54   \n2                           5               37            17          41   \n3                           5               57            17          41   \n4                           5               55            17          54   \n...                       ...              ...           ...         ...   \n2077959                     5               37            18          52   \n2077960                     5               41            17          52   \n2077961                     5               37            17          52   \n2077962                     5               37            18          31   \n2077963                     5               41            17          54   \n\n         stem-height  stem-width  stem-color  has-ring  ring-type  habitat  \\\n0               1009        1669          51        17         15       16   \n1                 23        1032          38         6         14       16   \n2                514         271          38         6         14       16   \n3                394         808          51        17         35       16   \n4                569        1327          53        17         14       16   \n...              ...         ...         ...       ...        ...      ...   \n2077959          163          92          29         6         14       16   \n2077960          165         695          51         6         14       19   \n2077961          512         931          53        17         35       16   \n2077962          496         303          31         6         14       16   \n2077963          165        1728          51         6         14       16   \n\n         season  \n0             0  \n1             0  \n2             1  \n3             2  \n4             2  \n...         ...  \n2077959       2  \n2077960       0  \n2077961       0  \n2077962       0  \n2077963       3  \n\n[2077964 rows x 16 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.065598Z","iopub.execute_input":"2024-08-01T10:29:04.066287Z","iopub.status.idle":"2024-08-01T10:29:04.072709Z","shell.execute_reply.started":"2024-08-01T10:29:04.066247Z","shell.execute_reply":"2024-08-01T10:29:04.071737Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"(3116945, 17)"},"metadata":{}}]},{"cell_type":"code","source":"df_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.074191Z","iopub.execute_input":"2024-08-01T10:29:04.074838Z","iopub.status.idle":"2024-08-01T10:29:04.082967Z","shell.execute_reply.started":"2024-08-01T10:29:04.074802Z","shell.execute_reply":"2024-08-01T10:29:04.082170Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(2077964, 16)"},"metadata":{}}]},{"cell_type":"code","source":"#Checking If training data is Imbalanced\nresponse_data = df_train['class'].value_counts()\nplt.figure(figsize=(6,6))\nfig, ax = plt.subplots()\nax.pie(response_data, labels = [0,1])\nax.set_title('Checking Imbalance in Training Data Or Response')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.084210Z","iopub.execute_input":"2024-08-01T10:29:04.084553Z","iopub.status.idle":"2024-08-01T10:29:04.251612Z","shell.execute_reply.started":"2024-08-01T10:29:04.084512Z","shell.execute_reply":"2024-08-01T10:29:04.250207Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Checking Imbalance in Training Data Or Response')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df_train.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.253362Z","iopub.execute_input":"2024-08-01T10:29:04.254615Z","iopub.status.idle":"2024-08-01T10:29:04.262864Z","shell.execute_reply.started":"2024-08-01T10:29:04.254568Z","shell.execute_reply":"2024-08-01T10:29:04.261501Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'class', 'cap-diameter', 'cap-shape', 'cap-surface', 'cap-color',\n       'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', 'gill-color',\n       'stem-height', 'stem-width', 'stem-color', 'has-ring', 'ring-type',\n       'habitat', 'season'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"X_train_original = df_train[['cap-diameter', 'cap-shape', 'cap-surface', 'cap-color', 'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', 'gill-color', 'stem-height','stem-width', 'stem-color', 'has-ring','ring-type','habitat','season']]\ny_train_original = df_train['class']","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.264629Z","iopub.execute_input":"2024-08-01T10:29:04.265487Z","iopub.status.idle":"2024-08-01T10:29:04.484159Z","shell.execute_reply.started":"2024-08-01T10:29:04.265442Z","shell.execute_reply":"2024-08-01T10:29:04.483345Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"X_preds = df_test[['cap-diameter', 'cap-shape', 'cap-surface', 'cap-color', 'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', 'gill-color', 'stem-height','stem-width', 'stem-color', 'has-ring','ring-type','habitat','season']]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.485277Z","iopub.execute_input":"2024-08-01T10:29:04.485566Z","iopub.status.idle":"2024-08-01T10:29:04.615438Z","shell.execute_reply.started":"2024-08-01T10:29:04.485542Z","shell.execute_reply":"2024-08-01T10:29:04.614601Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"X_preds = X_preds.to_numpy()\nX_preds_tensor = torch.tensor(X_preds, dtype = torch.float32)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:50:49.105686Z","iopub.execute_input":"2024-08-01T10:50:49.106550Z","iopub.status.idle":"2024-08-01T10:50:49.261419Z","shell.execute_reply.started":"2024-08-01T10:50:49.106518Z","shell.execute_reply":"2024-08-01T10:50:49.260507Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train_original, y_train_original, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:04.616610Z","iopub.execute_input":"2024-08-01T10:29:04.616910Z","iopub.status.idle":"2024-08-01T10:29:05.772243Z","shell.execute_reply.started":"2024-08-01T10:29:04.616885Z","shell.execute_reply":"2024-08-01T10:29:05.771217Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.773859Z","iopub.execute_input":"2024-08-01T10:29:05.774265Z","iopub.status.idle":"2024-08-01T10:29:05.780031Z","shell.execute_reply.started":"2024-08-01T10:29:05.774229Z","shell.execute_reply":"2024-08-01T10:29:05.779026Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"(2493556, 15) (2493556,) (623389, 15) (623389,)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(X_preds.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.781252Z","iopub.execute_input":"2024-08-01T10:29:05.781576Z","iopub.status.idle":"2024-08-01T10:29:05.791280Z","shell.execute_reply.started":"2024-08-01T10:29:05.781551Z","shell.execute_reply":"2024-08-01T10:29:05.790313Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"(2077964, 15)\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train = X_train.to_numpy()\ny_train = y_train.to_numpy()\nX_test = X_test.to_numpy()\ny_test = y_test.to_numpy()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.793853Z","iopub.execute_input":"2024-08-01T10:29:05.794154Z","iopub.status.idle":"2024-08-01T10:29:05.932394Z","shell.execute_reply.started":"2024-08-01T10:29:05.794130Z","shell.execute_reply":"2024-08-01T10:29:05.931300Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"X_train_tensor = torch.tensor(X_train, dtype = torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype = torch.float32)\nX_test_tensor = torch.tensor(X_test, dtype = torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype = torch.float32)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.933672Z","iopub.execute_input":"2024-08-01T10:29:05.933996Z","iopub.status.idle":"2024-08-01T10:29:05.977031Z","shell.execute_reply.started":"2024-08-01T10:29:05.933969Z","shell.execute_reply":"2024-08-01T10:29:05.976189Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Custom dataset class\nclass CustomDataset(Dataset):\n    def __init__(self, X, y=None):\n        self.X = X\n        self.y = y\n\n    def __len__(self):\n        return len(self.X)\n\n    def __getitem__(self, idx):\n        \n        try:\n            if self.y is not None:\n                return self.X[idx], self.y[idx]\n            else:\n                return self.X[idx]\n        except Exception as e:\n            print(f\"Exception in __getitem__: {e}\")\n            raise","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.978308Z","iopub.execute_input":"2024-08-01T10:29:05.978691Z","iopub.status.idle":"2024-08-01T10:29:05.985711Z","shell.execute_reply.started":"2024-08-01T10:29:05.978656Z","shell.execute_reply":"2024-08-01T10:29:05.984647Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"train_dataset = CustomDataset(X_train_tensor, y_train_tensor)\ntest_dataset = CustomDataset(X_test_tensor, y_test_tensor)\n\n# Create DataLoaders\n# train_loader = DataLoader(train_dataset, batch_size=64,shuffle=True,pin_memory=True)\n# test_loader = DataLoader(test_dataset, batch_size=64,shuffle=False, pin_memory=True)\ntrain_loader = DataLoader(train_dataset, batch_size=128,shuffle=True,num_workers=3, pin_memory=True, persistent_workers=True)\ntest_loader = DataLoader(test_dataset, batch_size=128,shuffle=False,num_workers=3, pin_memory=True, persistent_workers=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.986900Z","iopub.execute_input":"2024-08-01T10:29:05.987246Z","iopub.status.idle":"2024-08-01T10:29:05.995775Z","shell.execute_reply.started":"2024-08-01T10:29:05.987221Z","shell.execute_reply":"2024-08-01T10:29:05.994874Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# Model\nclass ModelV1(nn.Module):\n    def __init__(self,\n                 input_shape: int,\n                 hidden_units: int,\n                 output_shapes: int):\n        super().__init__()\n\n        self.layer_stack = nn.Sequential(\n            nn.Linear(in_features=input_shape, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ELU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ELU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ELU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ELU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=output_shapes)\n        )\n\n    def forward(self, x: torch.Tensor):\n        return self.layer_stack(x)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:05.996804Z","iopub.execute_input":"2024-08-01T10:29:05.997103Z","iopub.status.idle":"2024-08-01T10:29:06.008954Z","shell.execute_reply.started":"2024-08-01T10:29:05.997053Z","shell.execute_reply":"2024-08-01T10:29:06.008119Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"model_1 = ModelV1(input_shape=15,\n                  hidden_units=512,\n                  output_shapes=1).to(device)\n\n\nloss_fn = nn.BCEWithLogitsLoss()\n\noptimizer = torch.optim.SGD(params=model_1.parameters(),\n                            lr=0.1)\n# optimizer = torch.optim.SGD(params=model_1.parameters(),\n#                             lr=0.001)\n\n\n\n# Define a ReduceLROnPlateau scheduler\n# scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=1)\nscheduler = CosineAnnealingLR(optimizer, T_max=10, eta_min=0.001)\n\n\n\ndef accuracy_fn(y_true, y_pred):\n    correct = torch.eq(y_true, y_pred).sum().item()\n    acc = (correct/len(y_pred))*100\n    return acc","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:06.013619Z","iopub.execute_input":"2024-08-01T10:29:06.013927Z","iopub.status.idle":"2024-08-01T10:29:06.956193Z","shell.execute_reply.started":"2024-08-01T10:29:06.013903Z","shell.execute_reply":"2024-08-01T10:29:06.955335Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"import torch\nfrom torch.cuda.amp import GradScaler, autocast\n\n# Initialize the GradScaler\nscaler = GradScaler()\n\nepochs = 11\n\nfor epoch in range(epochs):\n    current_lr = optimizer.param_groups[0]['lr']\n\n    if epoch % 1 == 0:\n        print(f\"\\n\\n\\nEpoch: {epoch}\")\n\n    ### TRAINING\n    model_1.train()\n    train_loss = 0\n\n    # Loop through training batches\n    for batch, (X, y) in enumerate(train_loader):\n        X, y = X.to(device), y.to(device)\n\n        # 1. Forward pass with autocast\n        with autocast():\n            y_logits = model_1(X).squeeze()\n            y_pred = torch.round(torch.sigmoid(y_logits))\n            loss = loss_fn(y_logits, y)\n        \n        optimizer.zero_grad()\n        \n        # 2. Backward pass with scaling\n        scaler.scale(loss).backward()\n\n        # 3. Optimizer step\n        scaler.step(optimizer)\n        scaler.update()\n\n        train_loss += loss.item()  # Accumulate training loss\n        acc = accuracy_fn(y_true=y, y_pred=y_pred)\n        \n        if batch % 4000 == 0 and epoch % 1 == 0:\n            print(f'Looked at: {batch * 128}/{len(train_loader.dataset)} samples. | Loss: {loss:.5f} | Acc: {acc:.2f}% ')\n\n    # Average train loss\n    train_loss /= len(train_loader)\n    if epoch % 1 == 0:\n        print(f\"\\nAverage Train Loss in Epoch {epoch}: {train_loss:.4f}\")\n\n    ### EVALUATION\n    model_1.eval()  # Ensure model is in evaluation mode\n    test_loss = 0\n    test_acc = 0\n\n    with torch.no_grad():  # No need to compute gradients\n        for X, y in test_loader:\n            X, y = X.to(device), y.to(device)\n\n            # Forward pass with autocast\n            with autocast():\n                y_logits = model_1(X).squeeze()\n                y_pred = torch.round(torch.sigmoid(y_logits))\n                loss = loss_fn(y_logits, y)\n\n            test_loss += loss.item()  # Accumulate test loss\n            acc = accuracy_fn(y_true=y, y_pred=y_pred)\n            test_acc += acc\n\n    # Scheduler step\n    scheduler.step()\n\n    # Print learning rate\n    \n\n    # Average test loss and accuracy\n    test_loss /= len(test_loader)\n    test_acc /= len(test_loader)\n    print(f\"\\nAverage Test Loss in Epoch {epoch}: {test_loss:.4f} | Test Accuracy: {test_acc:.2f}% | Current lr: {current_lr}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:29:06.957384Z","iopub.execute_input":"2024-08-01T10:29:06.957951Z","iopub.status.idle":"2024-08-01T10:48:32.817968Z","shell.execute_reply.started":"2024-08-01T10:29:06.957912Z","shell.execute_reply":"2024-08-01T10:48:32.816715Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"\n\n\nEpoch: 0\nLooked at: 0/2493556 samples. | Loss: 0.68801 | Acc: 59.38% \nLooked at: 512000/2493556 samples. | Loss: 0.45750 | Acc: 78.91% \nLooked at: 1024000/2493556 samples. | Loss: 0.30438 | Acc: 88.28% \nLooked at: 1536000/2493556 samples. | Loss: 0.30727 | Acc: 86.72% \nLooked at: 2048000/2493556 samples. | Loss: 0.31360 | Acc: 86.72% \n\nAverage Train Loss in Epoch 0: 0.3720\n\nAverage Test Loss in Epoch 0: 0.2802 | Test Accuracy: 87.94% | Current lr: 0.1\n\n\n\nEpoch: 1\nLooked at: 0/2493556 samples. | Loss: 0.35661 | Acc: 83.59% \nLooked at: 512000/2493556 samples. | Loss: 0.21705 | Acc: 90.62% \nLooked at: 1024000/2493556 samples. | Loss: 0.21479 | Acc: 89.84% \nLooked at: 1536000/2493556 samples. | Loss: 0.37301 | Acc: 85.94% \nLooked at: 2048000/2493556 samples. | Loss: 0.41003 | Acc: 84.38% \n\nAverage Train Loss in Epoch 1: 0.2114\n\nAverage Test Loss in Epoch 1: 0.2138 | Test Accuracy: 91.47% | Current lr: 0.09757729755661011\n\n\n\nEpoch: 2\nLooked at: 0/2493556 samples. | Loss: 0.25262 | Acc: 86.72% \nLooked at: 512000/2493556 samples. | Loss: 0.23621 | Acc: 92.97% \nLooked at: 1024000/2493556 samples. | Loss: 0.16850 | Acc: 92.97% \nLooked at: 1536000/2493556 samples. | Loss: 0.07173 | Acc: 97.66% \nLooked at: 2048000/2493556 samples. | Loss: 0.20166 | Acc: 93.75% \n\nAverage Train Loss in Epoch 2: 0.1541\n\nAverage Test Loss in Epoch 2: 0.1020 | Test Accuracy: 96.66% | Current lr: 0.0905463412215599\n\n\n\nEpoch: 3\nLooked at: 0/2493556 samples. | Loss: 0.05348 | Acc: 98.44% \nLooked at: 512000/2493556 samples. | Loss: 0.13375 | Acc: 94.53% \nLooked at: 1024000/2493556 samples. | Loss: 0.08739 | Acc: 97.66% \nLooked at: 1536000/2493556 samples. | Loss: 0.13706 | Acc: 95.31% \nLooked at: 2048000/2493556 samples. | Loss: 0.16904 | Acc: 93.75% \n\nAverage Train Loss in Epoch 3: 0.1198\n\nAverage Test Loss in Epoch 3: 0.1010 | Test Accuracy: 96.66% | Current lr: 0.07959536998847742\n\n\n\nEpoch: 4\nLooked at: 0/2493556 samples. | Loss: 0.06984 | Acc: 96.88% \nLooked at: 512000/2493556 samples. | Loss: 0.11470 | Acc: 95.31% \nLooked at: 1024000/2493556 samples. | Loss: 0.10196 | Acc: 96.88% \nLooked at: 1536000/2493556 samples. | Loss: 0.08578 | Acc: 97.66% \nLooked at: 2048000/2493556 samples. | Loss: 0.11031 | Acc: 96.88% \n\nAverage Train Loss in Epoch 4: 0.0965\n\nAverage Test Loss in Epoch 4: 0.0842 | Test Accuracy: 97.35% | Current lr: 0.0657963412215599\n\n\n\nEpoch: 5\nLooked at: 0/2493556 samples. | Loss: 0.07755 | Acc: 96.88% \nLooked at: 512000/2493556 samples. | Loss: 0.06888 | Acc: 96.88% \nLooked at: 1024000/2493556 samples. | Loss: 0.07245 | Acc: 96.09% \nLooked at: 1536000/2493556 samples. | Loss: 0.09079 | Acc: 96.09% \nLooked at: 2048000/2493556 samples. | Loss: 0.07729 | Acc: 96.88% \n\nAverage Train Loss in Epoch 5: 0.0800\n\nAverage Test Loss in Epoch 5: 0.1688 | Test Accuracy: 93.59% | Current lr: 0.0505\n\n\n\nEpoch: 6\nLooked at: 0/2493556 samples. | Loss: 0.20753 | Acc: 93.75% \nLooked at: 512000/2493556 samples. | Loss: 0.05906 | Acc: 97.66% \nLooked at: 1024000/2493556 samples. | Loss: 0.03638 | Acc: 98.44% \nLooked at: 1536000/2493556 samples. | Loss: 0.26430 | Acc: 90.62% \nLooked at: 2048000/2493556 samples. | Loss: 0.04172 | Acc: 98.44% \n\nAverage Train Loss in Epoch 6: 0.0673\n\nAverage Test Loss in Epoch 6: 0.0736 | Test Accuracy: 97.74% | Current lr: 0.03520365877844011\n\n\n\nEpoch: 7\nLooked at: 0/2493556 samples. | Loss: 0.05516 | Acc: 98.44% \nLooked at: 512000/2493556 samples. | Loss: 0.08068 | Acc: 99.22% \nLooked at: 1024000/2493556 samples. | Loss: 0.06071 | Acc: 98.44% \nLooked at: 1536000/2493556 samples. | Loss: 0.07691 | Acc: 98.44% \nLooked at: 2048000/2493556 samples. | Loss: 0.02788 | Acc: 98.44% \n\nAverage Train Loss in Epoch 7: 0.0586\n\nAverage Test Loss in Epoch 7: 0.0623 | Test Accuracy: 98.22% | Current lr: 0.02140463001152259\n\n\n\nEpoch: 8\nLooked at: 0/2493556 samples. | Loss: 0.08931 | Acc: 97.66% \nLooked at: 512000/2493556 samples. | Loss: 0.03472 | Acc: 98.44% \nLooked at: 1024000/2493556 samples. | Loss: 0.04081 | Acc: 99.22% \nLooked at: 1536000/2493556 samples. | Loss: 0.02125 | Acc: 99.22% \nLooked at: 2048000/2493556 samples. | Loss: 0.11460 | Acc: 97.66% \n\nAverage Train Loss in Epoch 8: 0.0529\n\nAverage Test Loss in Epoch 8: 0.0568 | Test Accuracy: 98.46% | Current lr: 0.010453658778440109\n\n\n\nEpoch: 9\nLooked at: 0/2493556 samples. | Loss: 0.06271 | Acc: 98.44% \nLooked at: 512000/2493556 samples. | Loss: 0.03282 | Acc: 98.44% \nLooked at: 1024000/2493556 samples. | Loss: 0.00606 | Acc: 100.00% \nLooked at: 1536000/2493556 samples. | Loss: 0.04257 | Acc: 98.44% \nLooked at: 2048000/2493556 samples. | Loss: 0.05654 | Acc: 97.66% \n\nAverage Train Loss in Epoch 9: 0.0494\n\nAverage Test Loss in Epoch 9: 0.0533 | Test Accuracy: 98.58% | Current lr: 0.0034227024433899004\n\n\n\nEpoch: 10\nLooked at: 0/2493556 samples. | Loss: 0.06629 | Acc: 98.44% \nLooked at: 512000/2493556 samples. | Loss: 0.09613 | Acc: 97.66% \nLooked at: 1024000/2493556 samples. | Loss: 0.07450 | Acc: 97.66% \nLooked at: 1536000/2493556 samples. | Loss: 0.01440 | Acc: 100.00% \nLooked at: 2048000/2493556 samples. | Loss: 0.04028 | Acc: 98.44% \n\nAverage Train Loss in Epoch 10: 0.0479\n\nAverage Test Loss in Epoch 10: 0.0526 | Test Accuracy: 98.61% | Current lr: 0.001\n","output_type":"stream"}]},{"cell_type":"code","source":"print(f'Allocated memory: {torch.cuda.memory_allocated()} bytes')\nprint(f'Cached memory: {torch.cuda.memory_reserved()} bytes')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T10:48:32.820055Z","iopub.execute_input":"2024-08-01T10:48:32.820371Z","iopub.status.idle":"2024-08-01T10:48:32.827430Z","shell.execute_reply.started":"2024-08-01T10:48:32.820343Z","shell.execute_reply":"2024-08-01T10:48:32.826414Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"Allocated memory: 33925120 bytes\nCached memory: 46137344 bytes\n","output_type":"stream"}]},{"cell_type":"code","source":"# Make prediction\nmodel_1.eval()\nwith torch.inference_mode():\n    y_logits = model_1(X_preds_tensor.to(device))\n    \nprint(y_logits[:10])\ny_pred_probs = torch.sigmoid(y_logits)\ny_preds = torch.round(y_pred_probs)\nprint(y_preds[:10])","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:04:17.710120Z","iopub.execute_input":"2024-08-01T11:04:17.710461Z","iopub.status.idle":"2024-08-01T11:04:19.111019Z","shell.execute_reply.started":"2024-08-01T11:04:17.710437Z","shell.execute_reply":"2024-08-01T11:04:19.110019Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"tensor([[-3.6239],\n        [ 6.0709],\n        [ 2.4550],\n        [ 4.5167],\n        [-5.2790],\n        [-4.6508],\n        [-5.8265],\n        [ 4.0547],\n        [ 4.5527],\n        [-6.2531]], device='cuda:0')\ntensor([[0.],\n        [1.],\n        [1.],\n        [1.],\n        [0.],\n        [0.],\n        [0.],\n        [1.],\n        [1.],\n        [0.]], device='cuda:0')\n","output_type":"stream"}]},{"cell_type":"code","source":"y_preds = y_preds.to('cpu')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:04:22.283943Z","iopub.execute_input":"2024-08-01T11:04:22.284338Z","iopub.status.idle":"2024-08-01T11:04:22.289459Z","shell.execute_reply.started":"2024-08-01T11:04:22.284308Z","shell.execute_reply":"2024-08-01T11:04:22.288331Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"y_preds_numpy = y_preds.numpy()\ny_preds_numpy = np.array(y_preds_numpy).flatten()\ny_preds_string = ['e' if p == 0 else 'p' for p in y_preds_numpy]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:06:13.951771Z","iopub.execute_input":"2024-08-01T11:06:13.952182Z","iopub.status.idle":"2024-08-01T11:06:20.316608Z","shell.execute_reply.started":"2024-08-01T11:06:13.952152Z","shell.execute_reply":"2024-08-01T11:06:20.315678Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"y_preds_numpy.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:06:20.318231Z","iopub.execute_input":"2024-08-01T11:06:20.318507Z","iopub.status.idle":"2024-08-01T11:06:20.324645Z","shell.execute_reply.started":"2024-08-01T11:06:20.318484Z","shell.execute_reply":"2024-08-01T11:06:20.323673Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"(2077964,)"},"metadata":{}}]},{"cell_type":"code","source":"assert len(df_for_preds_id['id']) == len(y_preds_string)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:08:00.509687Z","iopub.execute_input":"2024-08-01T11:08:00.510324Z","iopub.status.idle":"2024-08-01T11:08:00.514858Z","shell.execute_reply.started":"2024-08-01T11:08:00.510291Z","shell.execute_reply":"2024-08-01T11:08:00.513896Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"df_for_preds_id['id'].shape","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:05:25.530048Z","iopub.execute_input":"2024-08-01T11:05:25.530718Z","iopub.status.idle":"2024-08-01T11:05:25.536996Z","shell.execute_reply.started":"2024-08-01T11:05:25.530684Z","shell.execute_reply":"2024-08-01T11:05:25.536116Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"(2077964,)"},"metadata":{}}]},{"cell_type":"code","source":"y_preds_string[:10]","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:08:33.915531Z","iopub.execute_input":"2024-08-01T11:08:33.915961Z","iopub.status.idle":"2024-08-01T11:08:33.922689Z","shell.execute_reply.started":"2024-08-01T11:08:33.915927Z","shell.execute_reply":"2024-08-01T11:08:33.921721Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"['e', 'p', 'p', 'p', 'e', 'e', 'e', 'p', 'p', 'e']"},"metadata":{}}]},{"cell_type":"code","source":"df_predictions = pd.DataFrame({\n    'id': df_for_preds_id['id'],\n    'class': y_preds_string\n})\n\nprint(df_predictions)\n\n# Optionally, save to CSV\ndf_predictions.to_csv('submission.csv', index=False)\nprint('Submission successful!')","metadata":{"execution":{"iopub.status.busy":"2024-08-01T11:09:43.469417Z","iopub.execute_input":"2024-08-01T11:09:43.469830Z","iopub.status.idle":"2024-08-01T11:09:46.025946Z","shell.execute_reply.started":"2024-08-01T11:09:43.469799Z","shell.execute_reply":"2024-08-01T11:09:46.025064Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"              id class\n0        3116945     e\n1        3116946     p\n2        3116947     p\n3        3116948     p\n4        3116949     e\n...          ...   ...\n2077959  5194904     p\n2077960  5194905     p\n2077961  5194906     p\n2077962  5194907     e\n2077963  5194908     e\n\n[2077964 rows x 2 columns]\nSubmission successful!\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}